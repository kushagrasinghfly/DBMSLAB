#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

struct Process {
    int pid;        // Process ID
    int at;         // Arrival Time
    int bt;         // Burst Time
    int wt;         // Waiting Time
    int tat;        // Turnaround Time
    bool done;      // Completion flag
};

int main() {
    int n;
    cout << "Enter number of processes: ";
    cin >> n;

    vector<Process> p(n);
    vector<int> order;
    int time = 0, finished = 0;
    float totalWT = 0, totalTAT = 0;

    // Input: First AT, then BT
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        cout << "Enter Arrival Time and Burst Time for P" << i + 1 << ": ";
        cin >> p[i].at >> p[i].bt;
        p[i].done = false;
        p[i].wt = p[i].tat = 0;
    }

    // SJF Algorithm (Non-Preemptive)
    while (finished < n) {
        int idx = -1, minBT = 1e9;

        // Pick process with shortest burst time among arrived and not done
        for (int i = 0; i < n; i++) {
            if (!p[i].done && p[i].at <= time) {
                if (p[i].bt < minBT) {
                    minBT = p[i].bt;
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            time++; 
        } else {
            p[idx].wt = time - p[idx].at;
            time += p[idx].bt;
            p[idx].tat = p[idx].wt + p[idx].bt;
            p[idx].done = true;
            finished++;
            order.push_back(p[idx].pid);

            totalWT += p[idx].wt;
            totalTAT += p[idx].tat;
        }
    }

    // Output results
    cout << "\nExecution Order: ";
    for (int pid : order) cout << "P" << pid << " ";

    cout << "\n\nProcess\tAT\tBT\tWT\tTAT\n";
    for (auto &proc : p) {
        cout << "P" << proc.pid << "\t" << proc.at << "\t" << proc.bt
             << "\t" << proc.wt << "\t" << proc.tat << "\n";
    }

    cout << fixed << setprecision(2);
    cout << "\nAverage Waiting Time = " << totalWT / n;
    cout << "\nAverage Turnaround Time = " << totalTAT / n << "\n";

    return 0;
}
